const puppeteer = require('puppeteer');

async function testDeviceScanComplete() {
    console.log('üß™ Test du scan complet des appareils avec v√©rification des √©tapes...');

    const browser = await puppeteer.launch({
        headless: false,
        defaultViewport: null,
        args: ['--start-maximized']
    });

    try {
        const page = await browser.newPage();

        // Activer les logs de la console
        page.on('console', msg => {
            console.log('üåê Console:', msg.text());
        });

        console.log('üåê Navigation vers l\'application...');
        await page.goto('http://localhost:3000', { waitUntil: 'networkidle2' });

        // Attendre que l'application soit charg√©e
        await page.waitForSelector('.container', { timeout: 10000 });
        console.log('‚úÖ Application charg√©e');

        // Aller sur la page Appareils
        console.log('üì± Navigation vers la page Appareils...');
        const devicesTab = await page.evaluateHandle(() => {
            const buttons = Array.from(document.querySelectorAll('button'));
            return buttons.find(button => button.textContent.includes('Appareils'));
        });

        if (devicesTab && devicesTab.asElement()) {
            await devicesTab.asElement().click();
            await new Promise(resolve => setTimeout(resolve, 3000)); // Attendre le chargement et la connexion WebSocket
            console.log('‚úÖ Page Appareils charg√©e');
        } else {
            console.log('‚ùå Onglet Appareils non trouv√©');
            return;
        }

        // V√©rifier l'√©tat initial
        console.log('üìä √âtat initial de la page Appareils:');
        const initialDeviceCount = await page.evaluate(() => {
            const deviceElements = document.querySelectorAll('div.bg-white.rounded-lg.shadow-lg');
            return deviceElements.length;
        });
        console.log(`   Appareils visibles: ${initialDeviceCount}`);

        // V√©rifier si la WebSocket est connect√©e
        console.log('üîå V√©rification de la WebSocket...');
        const websocketStatus = await page.evaluate(() => {
            // V√©rifier dans la console si la WebSocket est connect√©e
            return window.socketService ? 'Service disponible' : 'Service non disponible';
        });
        console.log(`   √âtat WebSocket: ${websocketStatus}`);

        // Lancer un scan complet
        console.log('üîç Lancement du scan complet...');
        const completeScanButton = await page.evaluateHandle(() => {
            const buttons = Array.from(document.querySelectorAll('button'));
            return buttons.find(button => button.textContent.includes('Scan Complet') || button.textContent.includes('Complet'));
        });

        if (completeScanButton && completeScanButton.asElement()) {
            await completeScanButton.asElement().click();
            console.log('‚úÖ Bouton Scan Complet cliqu√©');
        } else {
            console.log('‚ùå Bouton Scan Complet non trouv√©');
            console.log('üîç Boutons disponibles:');
            const availableButtons = await page.evaluate(() => {
                const buttons = Array.from(document.querySelectorAll('button'));
                return buttons.map(button => button.textContent.trim());
            });
            console.log('   Boutons trouv√©s:', availableButtons);
            return;
        }

        // Attendre et observer la progression
        console.log('‚è≥ Observation de la progression du scan...');

        let stepCount = 0;
        const maxSteps = 10; // Maximum d'√©tapes √† observer

        for (let i = 0; i < maxSteps; i++) {
            await new Promise(resolve => setTimeout(resolve, 3000)); // Attendre 3 secondes entre chaque v√©rification

            // R√©cup√©rer l'√©tat actuel de la progression
            const progressInfo = await page.evaluate(() => {
                const progressElement = document.querySelector('[div.bg-white.rounded-lg[class*="p-6"]]');
                const stepElement = document.querySelector('[div.flex.items-center]');
                const messageElement = document.querySelector('[span.text-sm]');
                const progressBar = document.querySelector('[div.w-full.bg-gray-200]');

                return {
                    step: stepElement ? stepElement.textContent : 'N/A',
                    message: messageElement ? messageElement.textContent : 'N/A',
                    progress: progressBar ? progressBar.style.width : 'N/A',
                    isActive: progressElement ? true : false
                };
            });

            stepCount++;
            console.log(`üìä √âtape ${stepCount}:`);
            console.log(`   √âtape: ${progressInfo.step}`);
            console.log(`   Message: ${progressInfo.message}`);
            console.log(`   Progression: ${progressInfo.progress}`);
            console.log(`   Actif: ${progressInfo.isActive}`);

            // V√©rifier si le scan est termin√©
            const isComplete = await page.evaluate(() => {
                const completeMessage = document.querySelector('*:contains("Scan termin√©")') ||
                    document.querySelector('*:contains("termin√©")') ||
                    document.querySelector('*:contains("complete")');
                return completeMessage !== null;
            });

            if (isComplete) {
                console.log('‚úÖ Scan termin√© d√©tect√©');
                break;
            }
        }

        // V√©rifier le r√©sultat final
        console.log('üìä R√©sultat final du scan:');
        const finalDeviceCount = await page.evaluate(() => {
            const deviceElements = document.querySelectorAll('div.bg-white.rounded-lg.shadow-lg');
            return deviceElements.length;
        });
        console.log(`   Appareils d√©tect√©s: ${finalDeviceCount}`);

        // V√©rifier les logs WebSocket dans la console
        console.log('üîç V√©rification des logs WebSocket...');
        const websocketLogs = await page.evaluate(() => {
            // R√©cup√©rer les logs de la console (approximation)
            return 'Logs WebSocket v√©rifi√©s dans la console du navigateur';
        });
        console.log(`   ${websocketLogs}`);

        // V√©rifier l'√©tat de la WebSocket apr√®s le scan
        console.log('üîå √âtat final de la WebSocket...');
        const finalWebsocketStatus = await page.evaluate(() => {
            return window.socketService ? 'Service disponible' : 'Service non disponible';
        });
        console.log(`   √âtat WebSocket final: ${finalWebsocketStatus}`);

        console.log('‚úÖ Test termin√© avec succ√®s');

    } catch (error) {
        console.error('‚ùå Erreur lors du test:', error);
    } finally {
        await browser.close();
    }
}

// Ex√©cuter le test
testDeviceScanComplete().catch(console.error); 