const puppeteer = require('puppeteer');

async function testInvalidNetworks() {
    console.log('üß™ Test des r√©seaux non valid√©s...');

    const browser = await puppeteer.launch({
        headless: false,
        defaultViewport: null
    });

    try {
        const page = await browser.newPage();

        // Aller sur l'application
        console.log('üåê Navigation...');
        await page.goto('http://localhost:3000', { waitUntil: 'networkidle2' });

        // Attendre que l'application se charge
        await page.waitForSelector('button', { timeout: 10000 });
        console.log('‚úÖ Application charg√©e');

        // Attendre un peu
        await new Promise(resolve => setTimeout(resolve, 3000));

        // V√©rifier s'il y a des r√©seaux non valid√©s
        const invalidNetworksSection = await page.evaluate(() => {
            const section = document.querySelector('h2');
            if (section && section.textContent.includes('R√©seaux d√©tect√©s mais non valid√©s')) {
                return {
                    title: section.textContent,
                    count: section.textContent.match(/\((\d+)\)/)?.[1] || '0'
                };
            }
            return null;
        });

        if (invalidNetworksSection) {
            console.log('‚úÖ Section r√©seaux non valid√©s trouv√©e:');
            console.log(`   Titre: ${invalidNetworksSection.title}`);
            console.log(`   Nombre: ${invalidNetworksSection.count} r√©seaux`);
        } else {
            console.log('‚ÑπÔ∏è Aucune section r√©seaux non valid√©s trouv√©e (normal si tous les r√©seaux sont valides)');
        }

        // V√©rifier les ic√¥nes d'avertissement
        const alertIcons = await page.evaluate(() => {
            const icons = Array.from(document.querySelectorAll('svg'));
            const alertIcons = icons.filter(icon =>
                icon.innerHTML.includes('AlertTriangle') ||
                icon.innerHTML.includes('alert-triangle')
            );
            return alertIcons.length;
        });

        console.log(`üìä Ic√¥nes d'avertissement trouv√©es: ${alertIcons}`);

        // Cliquer sur "Scanner maintenant" pour voir s'il y a de nouveaux r√©seaux non valid√©s
        console.log('üîÑ Clic sur "Scanner maintenant"...');
        const buttons = await page.$$('button');
        for (const button of buttons) {
            const text = await button.evaluate(el => el.textContent);
            if (text.includes('Scanner maintenant')) {
                await button.click();
                console.log('‚úÖ Bouton cliqu√©');
                break;
            }
        }

        // Attendre et v√©rifier √† nouveau
        await new Promise(resolve => setTimeout(resolve, 3000));

        const newInvalidNetworksSection = await page.evaluate(() => {
            const section = document.querySelector('h2');
            if (section && section.textContent.includes('R√©seaux d√©tect√©s mais non valid√©s')) {
                return {
                    title: section.textContent,
                    count: section.textContent.match(/\((\d+)\)/)?.[1] || '0'
                };
            }
            return null;
        });

        if (newInvalidNetworksSection) {
            console.log('‚úÖ Section r√©seaux non valid√©s apr√®s scan:');
            console.log(`   Titre: ${newInvalidNetworksSection.title}`);
            console.log(`   Nombre: ${newInvalidNetworksSection.count} r√©seaux`);
        }

        await new Promise(resolve => setTimeout(resolve, 2000));

    } catch (error) {
        console.error('‚ùå Erreur:', error.message);
    } finally {
        await browser.close();
    }
}

testInvalidNetworks().catch(console.error); 