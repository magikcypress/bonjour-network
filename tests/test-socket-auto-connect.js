#!/usr/bin/env node

/**
 * Test de connexion automatique Socket.IO
 * Simule le comportement attendu du hook useDataManager
 */

const io = require('socket.io-client');

async function testAutoConnect() {
    console.log('üîç Test de connexion automatique Socket.IO...');

    let socket = null;
    let isConnected = false;

    // Simuler la connexion automatique
    const connectSocket = () => {
        return new Promise((resolve, reject) => {
            console.log('üîå Tentative de connexion automatique...');

            socket = io('http://localhost:5001', {
                transports: ['websocket', 'polling'],
                timeout: 10000,
                reconnection: true,
                reconnectionAttempts: 3,
                reconnectionDelay: 1000
            });

            socket.on('connect', () => {
                console.log('‚úÖ Socket.IO connect√© automatiquement !');
                console.log(`üîå Socket ID: ${socket.id}`);
                isConnected = true;
                resolve(socket);
            });

            socket.on('connect_error', (error) => {
                console.error('‚ùå Erreur de connexion automatique:', error.message);
                isConnected = false;
                reject(error);
            });

            socket.on('disconnect', (reason) => {
                console.log('üîå Socket.IO d√©connect√©:', reason);
                isConnected = false;
            });
        });
    };

    // Simuler le changement d'onglet vers "devices"
    console.log('üì± Simulation du changement vers l\'onglet "devices"...');

    try {
        await connectSocket();

        // V√©rifier l'√©tat de connexion
        console.log(`üìä √âtat de connexion: ${isConnected ? 'CONNECT√â' : 'D√âCONNECT√â'}`);

        // Tester un √©v√©nement
        socket.emit('get-real-time-scan-status');

        // Attendre la r√©ponse
        socket.on('real-time-scan-status', (data) => {
            console.log('üì° √âv√©nement re√ßu:', data);
        });

    } catch (error) {
        console.error('‚ùå √âchec de la connexion automatique:', error);
    }

    // Timeout
    setTimeout(() => {
        console.log('‚è∞ Fin du test...');
        if (socket) {
            socket.disconnect();
        }
        process.exit(0);
    }, 3000);
}

testAutoConnect().catch(console.error); 