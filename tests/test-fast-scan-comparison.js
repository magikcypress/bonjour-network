const ImprovedDeviceScanner = require('../server/improved-device-scanner');

async function testFastScanComparison() {
    console.log('üî¨ Comparaison scan rapide avant/apr√®s am√©lioration...\n');

    try {
        const scanner = new ImprovedDeviceScanner();

        // Test 1: Scan rapide avec mini-ping (nouveau)
        console.log('üì° Test 1: Scan rapide avec mini-ping sweep...');
        const startTime1 = Date.now();
        const devicesWithPing = await scanner.scanConnectedDevices('fast');
        const duration1 = Date.now() - startTime1;

        console.log(`‚úÖ Termin√© en ${duration1}ms - ${devicesWithPing.length} appareils`);

        // Test 2: Simulation de l'ancien scan (sans mini-ping)
        console.log('\nüì° Test 2: Simulation ancien scan (ARP + netstat + DNS uniquement)...');
        const startTime2 = Date.now();

        // Simuler l'ancien comportement en ne gardant que les sources ARP, netstat, DNS
        const oldStyleDevices = devicesWithPing.filter(device => {
            const sources = device.sources || [device.source];
            return sources.some(source => ['arp', 'netstat', 'dns'].includes(source));
        });

        const duration2 = Date.now() - startTime2;

        console.log(`‚úÖ Termin√© en ${duration2}ms - ${oldStyleDevices.length} appareils`);

        // Comparaison
        console.log('\nüìä Comparaison:');
        console.log(`   Nouveau scan (avec mini-ping): ${devicesWithPing.length} appareils`);
        console.log(`   Ancien scan (sans mini-ping):  ${oldStyleDevices.length} appareils`);

        const improvement = devicesWithPing.length - oldStyleDevices.length;
        if (improvement > 0) {
            console.log(`   ‚úÖ Am√©lioration: +${improvement} appareils d√©couverts`);
        } else if (improvement === 0) {
            console.log(`   ‚ö†Ô∏è  Aucune am√©lioration (normal si r√©seau peu peupl√©)`);
        } else {
            console.log(`   ‚ùå R√©gression: ${improvement} appareils (erreur de filtrage?)`);
        }

        // D√©tail des appareils d√©couverts par mini-ping
        const pingDiscoveredDevices = devicesWithPing.filter(device => {
            const sources = device.sources || [device.source];
            return sources.includes('ping');
        });

        if (pingDiscoveredDevices.length > 0) {
            console.log(`\nüéØ Appareils d√©couverts par mini-ping:`);
            pingDiscoveredDevices.forEach((device, index) => {
                console.log(`   ${index + 1}. ${device.ip} (${device.mac || 'N/A'})`);
            });
        }

        // Recommandations
        console.log('\nüí° Recommandations:');
        if (devicesWithPing.length > oldStyleDevices.length) {
            console.log('‚úÖ Le mini-ping sweep am√©liore la d√©tection');
        } else if (devicesWithPing.length === oldStyleDevices.length && devicesWithPing.length > 0) {
            console.log('‚úÖ Le mini-ping sweep maintient la d√©tection sans ralentir');
        } else {
            console.log('‚ö†Ô∏è  Le mini-ping sweep n\'apporte pas d\'am√©lioration visible');
        }

    } catch (error) {
        console.error('‚ùå Erreur lors de la comparaison:', error.message);
    }
}

// Ex√©cuter le test
testFastScanComparison(); 