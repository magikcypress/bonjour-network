#!/usr/bin/env node

const puppeteer = require('puppeteer');
const io = require('socket.io-client');

async function testHeadless() {
    console.log('üß™ Test headless de toutes les fonctionnalit√©s...\n');

    const browser = await puppeteer.launch({
        headless: true, // Mode headless pour √©viter les probl√®mes de sandbox
        defaultViewport: { width: 1280, height: 720 },
        args: [
            '--no-sandbox',
            '--disable-setuid-sandbox',
            '--disable-dev-shm-usage',
            '--disable-accelerated-2d-canvas',
            '--no-first-run',
            '--no-zygote',
            '--disable-gpu',
            '--disable-web-security',
            '--disable-features=VizDisplayCompositor'
        ]
    });

    try {
        const page = await browser.newPage();

        // Activer les logs de la console
        page.on('console', msg => {
            console.log('üåê Console:', msg.text());
        });

        // Activer les logs d'erreur
        page.on('pageerror', error => {
            console.log('‚ùå Erreur page:', error.message);
        });

        console.log('üåê Navigation vers l\'application...');
        await page.goto('http://localhost:3000', {
            waitUntil: 'networkidle2',
            timeout: 30000
        });

        // Attendre que l'application soit charg√©e
        await page.waitForSelector('.container', { timeout: 15000 });
        console.log('‚úÖ Application charg√©e');

        // ===== TEST 1: V√©rification des compteurs =====
        console.log('\nüìä TEST 1: V√©rification des compteurs...');
        await testCounters(page);

        // ===== TEST 2: Test de navigation entre onglets =====
        console.log('\nüì± TEST 2: Test de navigation entre onglets...');
        await testTabNavigation(page);

        // ===== TEST 3: Test des r√©seaux WiFi =====
        console.log('\nüì∂ TEST 3: Test des r√©seaux WiFi...');
        await testNetworks(page);

        // ===== TEST 4: Test des appareils =====
        console.log('\nüì± TEST 4: Test des appareils...');
        await testDevices(page);

        // ===== TEST 5: Test de validation =====
        console.log('\n‚úÖ TEST 5: Test de validation...');
        await testValidation(page);

        // ===== TEST 6: Test des d√©tails de validation =====
        console.log('\nüìã TEST 6: Test des d√©tails de validation...');
        await testValidationDetails(page);

        // ===== TEST 7: Test des compteurs pr√©cis =====
        console.log('\nüìä TEST 7: Test des compteurs pr√©cis...');
        await testPreciseCounters(page);

        // ===== TEST 8: Test des r√©seaux invalides =====
        console.log('\n‚ùå TEST 8: Test des r√©seaux invalides...');
        await testInvalidNetworks(page);

        console.log('\nüéâ Tests headless termin√©s avec succ√®s !');

    } catch (error) {
        console.error('‚ùå Erreur lors des tests:', error.message);
    } finally {
        await browser.close();
    }
}

async function testCounters(page) {
    try {
        // Attendre que les compteurs soient charg√©s
        await page.waitForSelector('[data-testid="networks-count"]', { timeout: 10000 });

        const networksCount = await page.$eval('[data-testid="networks-count"]', el => el.textContent);
        const devicesCount = await page.$eval('[data-testid="devices-count"]', el => el.textContent);
        const dnsCount = await page.$eval('[data-testid="dns-count"]', el => el.textContent);

        console.log(`‚úÖ Compteurs: ${networksCount} r√©seaux, ${devicesCount} appareils, ${dnsCount} DNS`);
    } catch (error) {
        console.log('‚ö†Ô∏è Compteurs non trouv√©s:', error.message);
    }
}

async function testTabNavigation(page) {
    try {
        // Cliquer sur l'onglet Appareils
        await page.click('[data-testid="tab-devices"]');
        await page.waitForTimeout(1000);
        console.log('‚úÖ Navigation vers onglet Appareils');

        // Cliquer sur l'onglet R√©seaux
        await page.click('[data-testid="tab-networks"]');
        await page.waitForTimeout(1000);
        console.log('‚úÖ Navigation vers onglet R√©seaux');

        // Cliquer sur l'onglet DNS & Services
        await page.click('[data-testid="tab-dns"]');
        await page.waitForTimeout(1000);
        console.log('‚úÖ Navigation vers onglet DNS & Services');

    } catch (error) {
        console.log('‚ö†Ô∏è Navigation entre onglets √©chou√©e:', error.message);
    }
}

async function testNetworks(page) {
    try {
        // Aller √† l'onglet R√©seaux
        await page.click('[data-testid="tab-networks"]');
        await page.waitForTimeout(2000);

        // V√©rifier la pr√©sence de la liste des r√©seaux
        const networksList = await page.$$('.network-card');
        console.log(`‚úÖ R√©seaux trouv√©s: ${networksList.length} cartes`);

    } catch (error) {
        console.log('‚ö†Ô∏è Test r√©seaux √©chou√©:', error.message);
    }
}

async function testDevices(page) {
    try {
        // Aller √† l'onglet Appareils
        await page.click('[data-testid="tab-devices"]');
        await page.waitForTimeout(2000);

        // V√©rifier la pr√©sence de la liste des appareils
        const devicesList = await page.$$('.device-card');
        console.log(`‚úÖ Appareils trouv√©s: ${devicesList.length} cartes`);

    } catch (error) {
        console.log('‚ö†Ô∏è Test appareils √©chou√©:', error.message);
    }
}

async function testValidation(page) {
    try {
        // Aller √† l'onglet DNS & Services
        await page.click('[data-testid="tab-dns"]');
        await page.waitForTimeout(2000);

        // V√©rifier la pr√©sence des sections de validation
        const resolvedSection = await page.$('.resolved-hosts');
        const failedSection = await page.$('.failed-hosts');

        if (resolvedSection) console.log('‚úÖ Section h√¥tes r√©solus trouv√©e');
        if (failedSection) console.log('‚úÖ Section h√¥tes √©chou√©s trouv√©e');

    } catch (error) {
        console.log('‚ö†Ô∏è Test validation √©chou√©:', error.message);
    }
}

async function testValidationDetails(page) {
    try {
        // Aller √† l'onglet DNS & Services
        await page.click('[data-testid="tab-dns"]');
        await page.waitForTimeout(2000);

        // V√©rifier la pr√©sence des d√©tails de validation
        const validationDetails = await page.$$('.validation-details');
        console.log(`‚úÖ D√©tails de validation trouv√©s: ${validationDetails.length}`);

    } catch (error) {
        console.log('‚ö†Ô∏è Test d√©tails validation √©chou√©:', error.message);
    }
}

async function testPreciseCounters(page) {
    try {
        // V√©rifier les compteurs pr√©cis
        const counters = await page.$$eval('.counter-item', elements =>
            elements.map(el => ({
                label: el.querySelector('.counter-label')?.textContent,
                value: el.querySelector('.counter-value')?.textContent
            }))
        );

        console.log(`‚úÖ Compteurs pr√©cis trouv√©s: ${counters.length}`);

    } catch (error) {
        console.log('‚ö†Ô∏è Test compteurs pr√©cis √©chou√©:', error.message);
    }
}

async function testInvalidNetworks(page) {
    try {
        // Aller √† l'onglet R√©seaux
        await page.click('[data-testid="tab-networks"]');
        await page.waitForTimeout(2000);

        // V√©rifier la pr√©sence de r√©seaux invalides
        const invalidNetworks = await page.$$('.invalid-network');
        console.log(`‚úÖ R√©seaux invalides trouv√©s: ${invalidNetworks.length}`);

    } catch (error) {
        console.log('‚ö†Ô∏è Test r√©seaux invalides √©chou√©:', error.message);
    }
}

// Ex√©cuter les tests
testHeadless(); 