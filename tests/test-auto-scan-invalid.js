const puppeteer = require('puppeteer');

async function testAutoScanInvalid() {
    console.log('üß™ Test du mode automatique - r√©seaux non valid√©s au 2√®me scan...');

    const browser = await puppeteer.launch({
        headless: false,
        defaultViewport: null
    });

    try {
        const page = await browser.newPage();

        // Aller sur l'application
        console.log('üåê Navigation...');
        await page.goto('http://localhost:3000', { waitUntil: 'networkidle2' });

        // Attendre que l'application se charge
        await page.waitForSelector('button', { timeout: 10000 });
        console.log('‚úÖ Application charg√©e');

        // Attendre un peu pour que les donn√©es initiales se chargent
        await new Promise(resolve => setTimeout(resolve, 3000));

        // V√©rifier l'√©tat initial
        console.log('üìä √âtat initial:');
        const initialState = await page.evaluate(() => {
            const validatedCount = document.querySelectorAll('[class*="border-blue-500"]').length;
            const invalidSection = document.querySelector('h2');
            const invalidCount = invalidSection && invalidSection.textContent.includes('non valid√©s')
                ? invalidSection.textContent.match(/\((\d+)\)/)?.[1] || '0'
                : '0';

            return {
                validated: validatedCount,
                invalid: parseInt(invalidCount),
                hasInvalidSection: !!invalidSection
            };
        });

        console.log(`   R√©seaux valid√©s: ${initialState.validated}`);
        console.log(`   R√©seaux non valid√©s: ${initialState.invalid}`);
        console.log(`   Section invalide pr√©sente: ${initialState.hasInvalidSection}`);

        // Activer le mode automatique
        console.log('üîÑ Activation du mode automatique...');
        const toggleButtons = await page.$$('button');
        let toggleFound = false;

        for (const button of toggleButtons) {
            const text = await button.evaluate(el => el.textContent);
            if (text.includes('Automatique') || text.includes('Mode auto')) {
                await button.click();
                console.log('‚úÖ Mode automatique activ√©');
                toggleFound = true;
                break;
            }
        }

        if (!toggleFound) {
            console.log('‚ö†Ô∏è Bouton mode automatique non trouv√©, recherche alternative...');
            // Chercher par classe ou attribut
            const autoToggle = await page.$('[button.bg-gradient-to-r], .bg-gradient-to-r from-green-500 to-emerald-500, button.bg-gradient-to-r');
            if (autoToggle) {
                await autoToggle.click();
                console.log('‚úÖ Mode automatique activ√© (m√©thode alternative)');
            }
        }

        // Attendre le premier scan automatique
        console.log('‚è≥ Attente du premier scan automatique...');
        await new Promise(resolve => setTimeout(resolve, 5000));

        // V√©rifier apr√®s le premier scan
        console.log('üìä Apr√®s premier scan automatique:');
        const firstScanState = await page.evaluate(() => {
            const validatedCount = document.querySelectorAll('[class*="border-blue-500"]').length;
            const invalidSection = document.querySelector('h2');
            const invalidCount = invalidSection && invalidSection.textContent.includes('non valid√©s')
                ? invalidSection.textContent.match(/\((\d+)\)/)?.[1] || '0'
                : '0';

            return {
                validated: validatedCount,
                invalid: parseInt(invalidCount),
                hasInvalidSection: !!invalidSection
            };
        });

        console.log(`   R√©seaux valid√©s: ${firstScanState.validated}`);
        console.log(`   R√©seaux non valid√©s: ${firstScanState.invalid}`);
        console.log(`   Section invalide pr√©sente: ${firstScanState.hasInvalidSection}`);

        // Attendre le deuxi√®me scan automatique
        console.log('‚è≥ Attente du deuxi√®me scan automatique...');
        await new Promise(resolve => setTimeout(resolve, 10000));

        // V√©rifier apr√®s le deuxi√®me scan
        console.log('üìä Apr√®s deuxi√®me scan automatique:');
        const secondScanState = await page.evaluate(() => {
            const validatedCount = document.querySelectorAll('[class*="border-blue-500"]').length;
            const invalidSection = document.querySelector('h2');
            const invalidCount = invalidSection && invalidSection.textContent.includes('non valid√©s')
                ? invalidSection.textContent.match(/\((\d+)\)/)?.[1] || '0'
                : '0';

            return {
                validated: validatedCount,
                invalid: parseInt(invalidCount),
                hasInvalidSection: !!invalidSection
            };
        });

        console.log(`   R√©seaux valid√©s: ${secondScanState.validated}`);
        console.log(`   R√©seaux non valid√©s: ${secondScanState.invalid}`);
        console.log(`   Section invalide pr√©sente: ${secondScanState.hasInvalidSection}`);

        // Analyser les changements
        console.log('üìà Analyse des changements:');
        console.log(`   Premier scan - Valid√©s: ${firstScanState.validated}, Non valid√©s: ${firstScanState.invalid}`);
        console.log(`   Deuxi√®me scan - Valid√©s: ${secondScanState.validated}, Non valid√©s: ${secondScanState.invalid}`);

        if (secondScanState.invalid > firstScanState.invalid) {
            console.log('‚úÖ CONFIRM√â: Plus de r√©seaux non valid√©s au 2√®me scan !');
        } else if (secondScanState.hasInvalidSection && !firstScanState.hasInvalidSection) {
            console.log('‚úÖ CONFIRM√â: Section non valid√©s apparue au 2√®me scan !');
        } else {
            console.log('‚ÑπÔ∏è Aucun changement d√©tect√© dans les r√©seaux non valid√©s');
        }

        // D√©sactiver le mode automatique
        console.log('üîÑ D√©sactivation du mode automatique...');
        for (const button of toggleButtons) {
            const text = await button.evaluate(el => el.textContent);
            if (text.includes('Automatique') || text.includes('Mode auto')) {
                await button.click();
                console.log('‚úÖ Mode automatique d√©sactiv√©');
                break;
            }
        }

        await new Promise(resolve => setTimeout(resolve, 2000));

    } catch (error) {
        console.error('‚ùå Erreur:', error.message);
    } finally {
        await browser.close();
    }
}

testAutoScanInvalid().catch(console.error); 