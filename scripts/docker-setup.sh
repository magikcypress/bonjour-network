#!/bin/bash

# Script de configuration Docker pour WiFi Tracker

set -e

echo "üê≥ Configuration Docker pour WiFi Tracker"
echo "========================================"

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# V√©rifier que Docker est install√©
check_docker() {
    print_status "V√©rification de Docker..."
    if ! command -v docker &> /dev/null; then
        print_error "Docker n'est pas install√©. Veuillez l'installer d'abord."
        echo "  - macOS: https://docs.docker.com/desktop/mac/install/"
        echo "  - Linux: https://docs.docker.com/engine/install/"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        print_error "Docker Compose n'est pas install√©."
        exit 1
    fi
    
    print_success "Docker et Docker Compose sont install√©s"
}

# V√©rifier que Docker daemon fonctionne
check_docker_daemon() {
    print_status "V√©rification du daemon Docker..."
    if ! docker info &> /dev/null; then
        print_error "Le daemon Docker ne fonctionne pas. D√©marrez Docker Desktop."
        exit 1
    fi
    print_success "Docker daemon fonctionne"
}

# Cr√©er les dossiers n√©cessaires
create_directories() {
    print_status "Cr√©ation des dossiers n√©cessaires..."
    mkdir -p logs
    mkdir -p data
    print_success "Dossiers cr√©√©s"
}

# Builder l'image Docker
build_image() {
    print_status "Construction de l'image Docker..."
    docker build -t wifi-tracker .
    print_success "Image construite avec succ√®s"
}

# D√©marrer les services
start_services() {
    print_status "D√©marrage des services..."
    docker-compose up -d
    print_success "Services d√©marr√©s"
}

# V√©rifier le statut
check_status() {
    print_status "V√©rification du statut..."
    sleep 5
    if docker-compose ps | grep -q "Up"; then
        print_success "WiFi Tracker est d√©marr√© et accessible sur http://localhost:5001"
    else
        print_error "Erreur lors du d√©marrage. V√©rifiez les logs avec: docker-compose logs"
        exit 1
    fi
}

# Afficher les informations utiles
show_info() {
    echo ""
    echo "üéâ WiFi Tracker est pr√™t !"
    echo "=========================="
    echo ""
    echo "üì± Acc√®s √† l'application:"
    echo "   http://localhost:5001"
    echo ""
    echo "üîß Commandes utiles:"
    echo "   - Voir les logs: docker-compose logs -f"
    echo "   - Arr√™ter: docker-compose down"
    echo "   - Red√©marrer: docker-compose restart"
    echo "   - Mettre √† jour: docker-compose pull && docker-compose up -d"
    echo ""
    echo "üìÅ Dossiers cr√©√©s:"
    echo "   - logs/ : Logs de l'application"
    echo "   - data/ : Donn√©es persistantes"
    echo ""
    echo "üîí S√©curit√©:"
    echo "   - L'application fonctionne en mode privil√©gi√© pour acc√©der au r√©seau"
    echo "   - Utilise un utilisateur non-root dans le conteneur"
    echo "   - Les logs sont persistants"
}

# Menu principal
main() {
    echo ""
    echo "Choisissez une option:"
    echo "1) Installation compl√®te (recommand√©)"
    echo "2) V√©rifier l'installation"
    echo "3) D√©marrer les services"
    echo "4) Arr√™ter les services"
    echo "5) Voir les logs"
    echo "6) Nettoyer (supprimer conteneurs et images)"
    echo "q) Quitter"
    echo ""
    read -p "Votre choix: " choice
    
    case $choice in
        1)
            check_docker
            check_docker_daemon
            create_directories
            build_image
            start_services
            check_status
            show_info
            ;;
        2)
            check_docker
            check_docker_daemon
            print_status "V√©rification des conteneurs..."
            docker-compose ps
            ;;
        3)
            start_services
            check_status
            ;;
        4)
            print_status "Arr√™t des services..."
            docker-compose down
            print_success "Services arr√™t√©s"
            ;;
        5)
            docker-compose logs -f
            ;;
        6)
            print_warning "Cette action supprimera tous les conteneurs et images."
            read -p "√ätes-vous s√ªr ? (y/N): " confirm
            if [[ $confirm == [yY] ]]; then
                docker-compose down --rmi all --volumes --remove-orphans
                docker system prune -f
                print_success "Nettoyage termin√©"
            fi
            ;;
        q|Q)
            echo "Au revoir !"
            exit 0
            ;;
        *)
            print_error "Option invalide"
            main
            ;;
    esac
}

# Ex√©cution du script
if [[ $1 == "--auto" ]]; then
    # Mode automatique pour l'installation
    check_docker
    check_docker_daemon
    create_directories
    build_image
    start_services
    check_status
    show_info
else
    # Mode interactif
    main
fi 