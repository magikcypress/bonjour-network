#!/usr/bin/env node

const { exec } = require('child_process');
const { promisify } = require('util');
const execAsync = promisify(exec);

async function testAccessibilitySystem() {
    console.log('üß™ Test d\'accessibilit√© avec outils syst√®me...\n');

    const baseURL = 'http://localhost:3000';
    const urls = [
        { name: 'Page d\'accueil', url: '/' },
        { name: 'Page Appareils', url: '/appareils' },
        { name: 'Page R√©seaux', url: '/reseaux' },
        { name: 'Page DNS & Services', url: '/dns' }
    ];

    let hasErrors = false;

    for (const page of urls) {
        try {
            console.log(`üìã Test de ${page.name}...`);

            // Test de connectivit√© avec curl
            const fullUrl = `${baseURL}${page.url}`;
            const { stdout: html } = await execAsync(`curl -s -f "${fullUrl}"`, { timeout: 10000 });

            if (!html) {
                console.log(`‚ùå ${page.name}: Pas de r√©ponse`);
                hasErrors = true;
                continue;
            }

            console.log(`‚úÖ ${page.name}: Accessible`);

            // V√©rifications basiques avec grep
            const checks = [
                { name: 'Balise title', pattern: '<title>', found: html.includes('<title>') },
                { name: 'Balise main', pattern: '<main', found: html.includes('<main') },
                { name: 'Balise nav', pattern: '<nav', found: html.includes('<nav') },
                { name: 'Attribut lang', pattern: 'lang=', found: html.includes('lang=') },
                { name: 'Classes Tailwind', pattern: 'class=', found: html.includes('class=') },
                { name: 'Mode sombre', pattern: 'dark:', found: html.includes('dark:') },
                { name: 'Structure HTML', pattern: '<html', found: html.includes('<html') },
                { name: 'Meta viewport', pattern: 'viewport', found: html.includes('viewport') }
            ];

            console.log(`   üìã V√©rifications HTML:`);
            checks.forEach(check => {
                if (check.found) {
                    console.log(`      ‚úÖ ${check.name}`);
                } else {
                    console.log(`      ‚ùå ${check.name} manquant`);
                    hasErrors = true;
                }
            });

            // V√©rifications sp√©cifiques √† l'accessibilit√©
            const a11yChecks = [
                { name: 'Contraste (classes dark)', pattern: 'dark:', found: html.includes('dark:') },
                { name: 'Responsive (classes sm/md/lg)', pattern: 'sm:|md:|lg:', found: /sm:|md:|lg:/.test(html) },
                { name: 'Focus visible', pattern: 'focus-visible', found: html.includes('focus-visible') },
                { name: 'Aria labels', pattern: 'aria-label', found: html.includes('aria-label') },
                { name: 'Alt text', pattern: 'alt=', found: html.includes('alt=') }
            ];

            console.log(`   üéØ V√©rifications d'accessibilit√©:`);
            a11yChecks.forEach(check => {
                if (check.found) {
                    console.log(`      ‚úÖ ${check.name}`);
                } else {
                    console.log(`      ‚ö†Ô∏è  ${check.name} (optionnel)`);
                }
            });

        } catch (error) {
            console.log(`‚ùå ${page.name}: ${error.message}`);
            hasErrors = true;
        }
    }

    // Test du serveur backend
    try {
        console.log('\nüîç Test du serveur backend...');
        const { stdout: healthResponse } = await execAsync('curl -s -f http://localhost:5001/api/health', { timeout: 5000 });

        if (healthResponse) {
            console.log('‚úÖ Serveur backend accessible');

            // Test des endpoints API
            const apiEndpoints = [
                { name: 'API Health', url: '/api/health' },
                { name: 'API Devices', url: '/api/devices' },
                { name: 'API WiFi', url: '/api/wifi' },
                { name: 'API DNS', url: '/api/dns' },
                { name: 'API Stats', url: '/api/stats' }
            ];

            for (const endpoint of apiEndpoints) {
                try {
                    const { stdout } = await execAsync(`curl -s -f http://localhost:5001${endpoint.url}`, { timeout: 5000 });
                    if (stdout) {
                        console.log(`   ‚úÖ ${endpoint.name}`);
                    } else {
                        console.log(`   ‚ùå ${endpoint.name}`);
                        hasErrors = true;
                    }
                } catch (error) {
                    console.log(`   ‚ùå ${endpoint.name}: ${error.message}`);
                    hasErrors = true;
                }
            }
        } else {
            console.log('‚ùå Serveur backend inaccessible');
            hasErrors = true;
        }
    } catch (error) {
        console.log(`‚ùå Erreur serveur backend: ${error.message}`);
        hasErrors = true;
    }

    // Test des ports
    try {
        console.log('\nüîå Test des ports...');
        const { stdout: ports } = await execAsync('netstat -tlnp 2>/dev/null | grep -E ":(3000|5001)" || echo "Ports non trouv√©s"');
        console.log(`üìã Ports actifs:\n${ports}`);
    } catch (error) {
        console.log(`‚ö†Ô∏è Impossible de v√©rifier les ports: ${error.message}`);
    }

    // R√©sum√©
    console.log('\nüìä R√©sum√© des tests:');
    if (hasErrors) {
        console.log('‚ùå Des probl√®mes ont √©t√© trouv√©s');
        process.exit(1);
    } else {
        console.log('‚úÖ Tous les tests d\'accessibilit√© sont pass√©s !');
        process.exit(0);
    }
}

// Gestion des erreurs
process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Erreur non g√©r√©e:', reason);
    process.exit(1);
});

// Ex√©cuter les tests
testAccessibilitySystem(); 