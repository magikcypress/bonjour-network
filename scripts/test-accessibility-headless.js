#!/usr/bin/env node

const puppeteer = require('puppeteer');

const urls = [
    'http://localhost:3000/',
    'http://localhost:3000/appareils',
    'http://localhost:3000/reseaux',
    'http://localhost:3000/dns'
];

async function testAccessibilityHeadless() {
    console.log('üß™ Test d\'accessibilit√© headless...\n');

    const browser = await puppeteer.launch({
        headless: true,
        args: [
            '--no-sandbox',
            '--disable-setuid-sandbox',
            '--disable-dev-shm-usage',
            '--disable-accelerated-2d-canvas',
            '--no-first-run',
            '--no-zygote',
            '--disable-gpu',
            '--disable-web-security',
            '--disable-features=VizDisplayCompositor'
        ]
    });

    try {
        const page = await browser.newPage();

        // Activer les logs de la console
        page.on('console', msg => {
            console.log('üåê Console:', msg.text());
        });

        // Activer les logs d'erreur
        page.on('pageerror', error => {
            console.log('‚ùå Erreur page:', error.message);
        });

        let hasErrors = false;

        for (const url of urls) {
            try {
                console.log(`\nüìã Test d'accessibilit√© pour: ${url}`);

                await page.goto(url, {
                    waitUntil: 'networkidle2',
                    timeout: 30000
                });

                // Attendre que la page soit charg√©e
                await page.waitForSelector('.container', { timeout: 15000 });

                // V√©rifications d'accessibilit√©
                const accessibilityResults = await page.evaluate(() => {
                    const results = {
                        title: !!document.title,
                        main: !!document.querySelector('main'),
                        nav: !!document.querySelector('nav'),
                        h1: !!document.querySelector('h1'),
                        h2: !!document.querySelector('h2'),
                        lang: !!document.documentElement.lang,
                        viewport: !!document.querySelector('meta[name="viewport"]'),
                        description: !!document.querySelector('meta[name="description"]'),
                        buttons: document.querySelectorAll('button').length,
                        links: document.querySelectorAll('a').length,
                        images: document.querySelectorAll('img').length,
                        forms: document.querySelectorAll('form').length
                    };

                    // V√©rifier les attributs d'accessibilit√©
                    const buttons = document.querySelectorAll('button');
                    const links = document.querySelectorAll('a');
                    const images = document.querySelectorAll('img');

                    results.buttonsWithAria = Array.from(buttons).filter(btn =>
                        btn.getAttribute('aria-label') || btn.getAttribute('aria-labelledby')
                    ).length;

                    results.linksWithText = Array.from(links).filter(link =>
                        link.textContent.trim().length > 0
                    ).length;

                    results.imagesWithAlt = Array.from(images).filter(img =>
                        img.getAttribute('alt')
                    ).length;

                    return results;
                });

                console.log(`‚úÖ ${url} - V√©rifications d'accessibilit√©:`);
                console.log(`   üìÑ Titre: ${accessibilityResults.title ? '‚úÖ' : '‚ùå'}`);
                console.log(`   üß≠ Navigation: ${accessibilityResults.nav ? '‚úÖ' : '‚ùå'}`);
                console.log(`   üìù Contenu principal: ${accessibilityResults.main ? '‚úÖ' : '‚ùå'}`);
                console.log(`   üè∑Ô∏è Titres: H1=${accessibilityResults.h1 ? '‚úÖ' : '‚ùå'}, H2=${accessibilityResults.h2 ? '‚úÖ' : '‚ùå'}`);
                console.log(`   üåê Langue: ${accessibilityResults.lang ? '‚úÖ' : '‚ùå'}`);
                console.log(`   üì± Viewport: ${accessibilityResults.viewport ? '‚úÖ' : '‚ùå'}`);
                console.log(`   üìã Description: ${accessibilityResults.description ? '‚úÖ' : '‚ùå'}`);
                console.log(`   üîò Boutons: ${accessibilityResults.buttons} (${accessibilityResults.buttonsWithAria} avec aria)`);
                console.log(`   üîó Liens: ${accessibilityResults.links} (${accessibilityResults.linksWithText} avec texte)`);
                console.log(`   üñºÔ∏è Images: ${accessibilityResults.images} (${accessibilityResults.imagesWithAlt} avec alt)`);
                console.log(`   üìù Formulaires: ${accessibilityResults.forms}`);

                // V√©rifier les contrastes et couleurs
                const colorResults = await page.evaluate(() => {
                    const style = getComputedStyle(document.body);
                    const hasDarkMode = document.documentElement.classList.contains('dark');
                    const hasTailwindClasses = document.body.className.includes('bg-') ||
                        document.body.className.includes('text-') ||
                        document.body.className.includes('border-');

                    return {
                        hasDarkMode,
                        hasTailwindClasses,
                        backgroundColor: style.backgroundColor,
                        color: style.color
                    };
                });

                console.log(`   üé® Couleurs: Mode sombre=${colorResults.hasDarkMode ? '‚úÖ' : '‚ùå'}, Tailwind=${colorResults.hasTailwindClasses ? '‚úÖ' : '‚ùå'}`);

                // V√©rifier la responsivit√©
                const responsiveResults = await page.evaluate(() => {
                    const hasResponsiveClasses = document.body.className.includes('sm:') ||
                        document.body.className.includes('md:') ||
                        document.body.className.includes('lg:') ||
                        document.body.className.includes('xl:');
                    const hasFlexGrid = document.body.className.includes('flex') ||
                        document.body.className.includes('grid');

                    return {
                        hasResponsiveClasses,
                        hasFlexGrid
                    };
                });

                console.log(`   üì± Responsive: Classes=${responsiveResults.hasResponsiveClasses ? '‚úÖ' : '‚ùå'}, Flex/Grid=${responsiveResults.hasFlexGrid ? '‚úÖ' : '‚ùå'}`);

                // V√©rifier les erreurs de console
                const consoleErrors = await page.evaluate(() => {
                    return window.consoleErrors || [];
                });

                if (consoleErrors.length > 0) {
                    console.log(`   ‚ö†Ô∏è Erreurs console: ${consoleErrors.length}`);
                    hasErrors = true;
                }

            } catch (error) {
                console.error(`‚ùå Erreur lors du test de ${url}:`, error.message);
                hasErrors = true;
            }
        }

        if (hasErrors) {
            console.log('\n‚ùå Des probl√®mes d\'accessibilit√© ont √©t√© trouv√©s');
            process.exit(1);
        } else {
            console.log('\n‚úÖ Tous les tests d\'accessibilit√© ont r√©ussi');
            process.exit(0);
        }

    } catch (error) {
        console.error('‚ùå Erreur g√©n√©rale:', error.message);
        process.exit(1);
    } finally {
        await browser.close();
    }
}

// Ex√©cuter les tests
testAccessibilityHeadless(); 