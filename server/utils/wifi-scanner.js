const { exec } = require('child_process');
const { promisify } = require('util');
const execAsync = promisify(exec);

class WifiScanner {
    constructor() {
        this.platform = process.platform;
    }

    /**
     * Scanne les r√©seaux WiFi disponibles
     * @returns {Promise<Array>} Liste des r√©seaux WiFi
     */
    async scanWifiNetworks() {
        try {
            if (this.platform !== 'darwin') {
                console.log('‚ö†Ô∏è Scan WiFi non support√© sur cette plateforme');
                return [];
            }

            console.log('üîç Scan des r√©seaux WiFi...');

            // M√©thode 1: Essayer airport (d√©pr√©ci√© mais peut encore fonctionner)
            try {
                const result = await this.scanWithAirport();
                if (result && result.length > 0) {
                    console.log(`‚úÖ Scan airport: ${result.length} r√©seaux d√©tect√©s`);
                    return result;
                }
            } catch (error) {
                console.log('‚ö†Ô∏è Scan airport √©chou√©, essai m√©thode alternative...');
            }

            // M√©thode 2: Utiliser system_profiler
            try {
                const result = await this.scanWithSystemProfiler();
                if (result && result.length > 0) {
                    console.log(`‚úÖ Scan system_profiler: ${result.length} r√©seaux d√©tect√©s`);
                    return result;
                }
            } catch (error) {
                console.log('‚ö†Ô∏è Scan system_profiler √©chou√©');
            }

            // M√©thode 3: Utiliser wdutil (nouvelle m√©thode Apple)
            try {
                const result = await this.scanWithWdutil();
                if (result && result.length > 0) {
                    console.log(`‚úÖ Scan wdutil: ${result.length} r√©seaux d√©tect√©s`);
                    return result;
                }
            } catch (error) {
                console.log('‚ö†Ô∏è Scan wdutil √©chou√©');
            }

            console.log('‚ùå Aucune m√©thode de scan WiFi n\'a fonctionn√©');
            return [];

        } catch (error) {
            console.error('‚ùå Erreur lors du scan WiFi:', error.message);
            return [];
        }
    }

    /**
     * Scan avec airport (d√©pr√©ci√©)
     */
    async scanWithAirport() {
        const command = '/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -s';
        const { stdout } = await execAsync(command, { timeout: 10000 });

        if (!stdout || stdout.trim() === '') {
            throw new Error('Aucun r√©sultat');
        }

        const lines = stdout.trim().split('\n');
        const networks = [];

        // V√©rifier si c'est le message de d√©pr√©ciation
        if (stdout.includes('WARNING: The airport command line tool is deprecated')) {
            console.log('‚ö†Ô∏è Airport d√©pr√©ci√©, utilisation de system_profiler...');
            throw new Error('Airport d√©pr√©ci√©');
        }

        // Ignorer les lignes d'avertissement et la premi√®re ligne (en-t√™te)
        let startIndex = 0;
        for (let i = 0; i < lines.length; i++) {
            if (lines[i].includes('SSID') && lines[i].includes('BSSID')) {
                startIndex = i + 1;
                break;
            }
        }

        for (let i = startIndex; i < lines.length; i++) {
            const line = lines[i].trim();
            if (line && !line.includes('WARNING') && !line.includes('deprecated')) {
                const parts = line.split(/\s+/);
                if (parts.length >= 6) {
                    networks.push({
                        ssid: parts[0],
                        bssid: parts[1],
                        rssi: parts[2],
                        channel: parts[3],
                        security: parts[4],
                        type: parts[5] || 'Unknown'
                    });
                }
            }
        }

        return networks;
    }

    /**
     * Scan avec system_profiler
     */
    async scanWithSystemProfiler() {
        // V√©rifier si system_profiler est disponible
        try {
            await execAsync('which system_profiler');
        } catch (error) {
            console.log('‚ö†Ô∏è system_profiler non disponible sur ce syst√®me');
            throw new Error('system_profiler non disponible');
        }

        const command = 'system_profiler SPAirPortDataType -xml';
        const { stdout } = await execAsync(command, { timeout: 15000 });

        if (!stdout || stdout.trim() === '') {
            throw new Error('Aucun r√©sultat');
        }

        // Parser le XML pour extraire les r√©seaux
        const networks = [];
        const lines = stdout.split('\n');

        for (let i = 0; i < lines.length; i++) {
            const line = lines[i];
            if (line.includes('<key>SSID_STR</key>')) {
                const ssidLine = lines[i + 1];
                const ssid = ssidLine.replace(/<string>|<\/string>/g, '').trim();

                // Chercher les autres informations
                let bssid = 'Unknown';
                let rssi = 'Unknown';
                let security = 'Unknown';

                // Chercher BSSID
                for (let j = i; j < Math.min(i + 20, lines.length); j++) {
                    if (lines[j].includes('<key>BSSID</key>')) {
                        bssid = lines[j + 1].replace(/<string>|<\/string>/g, '').trim();
                        break;
                    }
                }

                // Chercher RSSI
                for (let j = i; j < Math.min(i + 20, lines.length); j++) {
                    if (lines[j].includes('<key>RSSI</key>')) {
                        rssi = lines[j + 1].replace(/<integer>|<\/integer>/g, '').trim();
                        break;
                    }
                }

                // Chercher Security
                for (let j = i; j < Math.min(i + 20, lines.length); j++) {
                    if (lines[j].includes('<key>SECURITY</key>')) {
                        security = lines[j + 1].replace(/<string>|<\/string>/g, '').trim();
                        break;
                    }
                }

                networks.push({
                    ssid,
                    bssid,
                    rssi,
                    channel: 'Unknown',
                    security,
                    type: 'Unknown'
                });
            }
        }

        return networks;
    }

    /**
 * Scan avec wdutil (nouvelle m√©thode Apple)
 */
    async scanWithWdutil() {
        try {
            // Obtenir les informations du r√©seau actuel via wdutil
            const command = 'sudo wdutil info';
            const { stdout } = await execAsync(command, { timeout: 10000 });

            if (!stdout || stdout.trim() === '') {
                throw new Error('Aucun r√©sultat');
            }

            // Extraire les informations du r√©seau actuel
            const lines = stdout.split('\n');
            let currentNetwork = null;
            let hasWifiInfo = false;

            for (const line of lines) {
                if (line.includes('SSID')) {
                    hasWifiInfo = true;
                    const ssid = line.split(':')[1]?.trim();

                    // Chercher d'autres informations
                    let bssid = 'Connected';
                    let rssi = 'Connected';
                    let security = 'Connected';
                    let channel = 'Current';

                    for (const infoLine of lines) {
                        if (infoLine.includes('BSSID')) {
                            bssid = infoLine.split(':')[1]?.trim() || 'Connected';
                        } else if (infoLine.includes('RSSI')) {
                            rssi = infoLine.split(':')[1]?.trim() || 'Connected';
                        } else if (infoLine.includes('Security')) {
                            security = infoLine.split(':')[1]?.trim() || 'Connected';
                        } else if (infoLine.includes('Channel')) {
                            channel = infoLine.split(':')[1]?.trim() || 'Current';
                        }
                    }

                    // Si le SSID est masqu√©, cr√©er un r√©seau factice
                    if (ssid === '<redacted>' || !ssid) {
                        currentNetwork = {
                            ssid: 'R√©seau WiFi Actuel (SSID masqu√©)',
                            bssid,
                            rssi,
                            channel,
                            security,
                            type: 'Current'
                        };
                    } else {
                        currentNetwork = {
                            ssid,
                            bssid,
                            rssi,
                            channel,
                            security,
                            type: 'Current'
                        };
                    }
                    break;
                }
            }

            // Si on a des infos WiFi mais pas de SSID, cr√©er un r√©seau factice
            if (hasWifiInfo && !currentNetwork) {
                currentNetwork = {
                    ssid: 'R√©seau WiFi Actuel',
                    bssid: 'Connected',
                    rssi: 'Connected',
                    channel: 'Current',
                    security: 'Connected',
                    type: 'Current'
                };
            }

            return currentNetwork ? [currentNetwork] : [];
        } catch (error) {
            console.log('‚ö†Ô∏è wdutil √©chou√©:', error.message);
            return [];
        }
    }
}

module.exports = WifiScanner; 