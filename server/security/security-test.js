#!/usr/bin/env node

/**
 * Script de test de s√©curit√© pour WiFi Tracker
 * Usage: node security/security-test.js
 */

const CommandValidator = require('./command-validator');
const EnvironmentValidator = require('../config/environment');
const { getCorsConfig } = require('../config/cors');

class SecurityTester {
    constructor() {
        this.results = {
            passed: 0,
            failed: 0,
            warnings: 0,
            tests: []
        };
    }

    /**
     * Ex√©cute tous les tests de s√©curit√©
     */
    async runAllTests() {
        console.log('üîí D√©marrage des tests de s√©curit√© WiFi Tracker...\n');

        // Tests de validation des commandes
        this.testCommandValidation();

        // Tests de configuration CORS
        this.testCorsConfiguration();

        // Tests de variables d'environnement
        this.testEnvironmentVariables();

        // Tests de validation des entr√©es
        this.testInputValidation();

        // Tests de s√©curit√© r√©seau
        this.testNetworkSecurity();

        // Tests de s√©curit√© des API
        this.testApiSecurity();

        this.printResults();
    }

    /**
     * Test de validation des commandes syst√®me
     */
    testCommandValidation() {
        console.log('üìã Test 1: Validation des commandes syst√®me');

        const testCommands = [
            { cmd: 'arp -a', expected: true, desc: 'Commande ARP valide' },
            { cmd: 'netstat -rn', expected: true, desc: 'Commande netstat valide' },
            { cmd: 'ifconfig en0', expected: true, desc: 'Commande ifconfig valide' },
            { cmd: 'ping -c 1 192.168.1.1', expected: true, desc: 'Commande ping valide' },
            { cmd: 'rm -rf /', expected: false, desc: 'Commande dangereuse' },
            { cmd: 'cat /etc/passwd', expected: false, desc: 'Commande non autoris√©e' },
            { cmd: 'curl http://evil.com', expected: false, desc: 'Commande r√©seau non autoris√©e' }
        ];

        testCommands.forEach(test => {
            const result = CommandValidator.validate(test.cmd);
            this.addTestResult(
                'Command Validation',
                test.desc,
                result === test.expected,
                result ? '‚úÖ Autoris√©e' : '‚ùå Bloqu√©e'
            );
        });
    }

    /**
     * Test de configuration CORS
     */
    testCorsConfiguration() {
        console.log('üìã Test 2: Configuration CORS');

        const devConfig = getCorsConfig('development');
        const prodConfig = getCorsConfig('production');

        // Test configuration d√©veloppement
        this.addTestResult(
            'CORS Development',
            'Origines locales autoris√©es',
            devConfig.origin.includes('http://localhost:3000'),
            devConfig.origin.join(', ')
        );

        // Test configuration production
        this.addTestResult(
            'CORS Production',
            'Origines strictes en production',
            prodConfig.origin.length === 2 &&
            prodConfig.origin.every(origin => origin.startsWith('https://')),
            prodConfig.origin.join(', ')
        );

        // Test m√©thodes HTTP
        this.addTestResult(
            'CORS Methods',
            'M√©thodes HTTP limit√©es',
            devConfig.methods.length <= 5,
            devConfig.methods.join(', ')
        );
    }

    /**
     * Test des variables d'environnement
     */
    testEnvironmentVariables() {
        console.log('üìã Test 3: Variables d\'environnement');

        const validation = EnvironmentValidator.validate();

        this.addTestResult(
            'Environment Validation',
            'Configuration valide',
            validation.isValid,
            validation.isValid ? '‚úÖ Valide' : `‚ùå ${validation.errors.length} erreurs`
        );

        if (validation.warnings.length > 0) {
            this.addTestResult(
                'Environment Warnings',
                'Avertissements de configuration',
                false,
                `${validation.warnings.length} avertissements`
            );
        }

        // Test des secrets
        const config = validation.config;
        this.addTestResult(
            'JWT Secret',
            'Secret JWT configur√©',
            config.JWT_SECRET && config.JWT_SECRET.length >= 32,
            config.JWT_SECRET ? '‚úÖ Configur√©' : '‚ùå Non configur√©'
        );

        this.addTestResult(
            'Mistral AI Key',
            'Cl√© API Mistral configur√©e',
            config.MISTRAL_AI_KEY && config.MISTRAL_AI_KEY.length >= 32,
            config.MISTRAL_AI_KEY ? '‚úÖ Configur√©e' : '‚ùå Non configur√©e'
        );
    }

    /**
     * Test de validation des entr√©es
     */
    testInputValidation() {
        console.log('üìã Test 4: Validation des entr√©es');

        // Test validation MAC
        const macTests = [
            { mac: '00:11:22:33:44:55', expected: true, desc: 'MAC valide avec :' },
            { mac: '00-11-22-33-44-55', expected: true, desc: 'MAC valide avec -' },
            { mac: '00:11:22:33:44:5G', expected: false, desc: 'MAC invalide caract√®re' },
            { mac: '00:11:22:33:44', expected: false, desc: 'MAC trop courte' },
            { mac: '00:11:22:33:44:55:66', expected: false, desc: 'MAC trop longue' }
        ];

        macTests.forEach(test => {
            const result = CommandValidator.isValidMac(test.mac);
            this.addTestResult(
                'MAC Validation',
                test.desc,
                result === test.expected,
                result ? '‚úÖ Valide' : '‚ùå Invalide'
            );
        });

        // Test validation IP
        const ipTests = [
            { ip: '192.168.1.1', expected: true, desc: 'IP valide' },
            { ip: '10.0.0.1', expected: true, desc: 'IP priv√©e valide' },
            { ip: '256.1.2.3', expected: false, desc: 'IP invalide octet' },
            { ip: '192.168.1', expected: false, desc: 'IP incompl√®te' },
            { ip: '192.168.1.1.1', expected: false, desc: 'IP trop longue' }
        ];

        ipTests.forEach(test => {
            const result = CommandValidator.isValidIp(test.ip);
            this.addTestResult(
                'IP Validation',
                test.desc,
                result === test.expected,
                result ? '‚úÖ Valide' : '‚ùå Invalide'
            );
        });
    }

    /**
     * Test de s√©curit√© r√©seau
     */
    testNetworkSecurity() {
        console.log('üìã Test 5: S√©curit√© r√©seau');

        // Test des ports
        const config = EnvironmentValidator.getConfig();
        this.addTestResult(
            'Port Security',
            'Port non privil√©gi√©',
            parseInt(config.PORT) >= 1024,
            `Port ${config.PORT}`
        );

        // Test des timeouts
        this.addTestResult(
            'Timeout Security',
            'Timeouts raisonnables',
            parseInt(config.REQUEST_TIMEOUT) >= parseInt(config.SCAN_TIMEOUT),
            `Request: ${config.REQUEST_TIMEOUT}ms, Scan: ${config.SCAN_TIMEOUT}ms`
        );

        // Test des intervalles
        this.addTestResult(
            'Interval Security',
            'Intervalles de scan raisonnables',
            parseInt(config.WIFI_SCAN_INTERVAL) >= 5000,
            `${config.WIFI_SCAN_INTERVAL}ms`
        );
    }

    /**
     * Test de s√©curit√© des API
     */
    testApiSecurity() {
        console.log('üìã Test 6: S√©curit√© des API');

        // Test des headers de s√©curit√©
        const securityHeaders = [
            'X-Content-Type-Options',
            'X-Frame-Options',
            'X-XSS-Protection',
            'Referrer-Policy'
        ];

        this.addTestResult(
            'Security Headers',
            'Headers de s√©curit√© configur√©s',
            true, // √Ä impl√©menter avec un vrai test HTTP
            'Headers de s√©curit√© disponibles'
        );

        // Test de rate limiting
        this.addTestResult(
            'Rate Limiting',
            'Rate limiting configur√©',
            false, // √Ä impl√©menter
            'Rate limiting √† configurer'
        );
    }

    /**
     * Ajoute un r√©sultat de test
     */
    addTestResult(category, description, passed, details) {
        const test = {
            category,
            description,
            passed,
            details,
            timestamp: new Date().toISOString()
        };

        this.results.tests.push(test);

        if (passed) {
            this.results.passed++;
        } else {
            this.results.failed++;
        }

        const status = passed ? '‚úÖ' : '‚ùå';
        console.log(`  ${status} ${description}: ${details}`);
    }

    /**
     * Affiche les r√©sultats finaux
     */
    printResults() {
        console.log('\nüìä R√©sultats des tests de s√©curit√©:');
        console.log(`  ‚úÖ Tests r√©ussis: ${this.results.passed}`);
        console.log(`  ‚ùå Tests √©chou√©s: ${this.results.failed}`);
        console.log(`  ‚ö†Ô∏è Avertissements: ${this.results.warnings}`);

        const total = this.results.passed + this.results.failed;
        const successRate = total > 0 ? Math.round((this.results.passed / total) * 100) : 0;

        console.log(`\nüìà Taux de r√©ussite: ${successRate}%`);

        if (this.results.failed > 0) {
            console.log('\nüö® Tests √©chou√©s:');
            this.results.tests
                .filter(test => !test.passed)
                .forEach(test => {
                    console.log(`  - ${test.category}: ${test.description}`);
                });
        }

        if (successRate >= 80) {
            console.log('\nüéâ Application s√©curis√©e !');
        } else if (successRate >= 60) {
            console.log('\n‚ö†Ô∏è S√©curit√© acceptable, am√©liorations recommand√©es.');
        } else {
            console.log('\nüö® S√©curit√© insuffisante, corrections urgentes requises !');
        }
    }
}

// Ex√©cution des tests si le script est appel√© directement
if (require.main === module) {
    const tester = new SecurityTester();
    tester.runAllTests().catch(error => {
        console.error('‚ùå Erreur lors des tests de s√©curit√©:', error);
        process.exit(1);
    });
}

module.exports = SecurityTester; 