#!/usr/bin/env node

const RealNoSudoWiFiScanner = require('./server/real-no-sudo-scanner');
const OSDetector = require('./server/utils/os-detector');

async function testWifiScan() {
    console.log('üß™ Test du scan WiFi sur Raspberry Pi...\n');

    try {
        // D√©tecter l'OS
        const osDetector = new OSDetector();
        const osInfo = await osDetector.detectOS();
        console.log(`üñ•Ô∏è Syst√®me d√©tect√©: ${osInfo.os} (${osInfo.platform})`);
        console.log(`üì± isMacOS: ${osInfo.isMacOS}`);
        console.log(`üêß isLinux: ${osInfo.isLinux}`);
        console.log(`üçì isRaspberryPi: ${osInfo.isRaspberryPi}\n`);

        // Tester le scan WiFi
        const scanner = new RealNoSudoWiFiScanner();
        console.log('üîç Lancement du scan WiFi...\n');

        const networks = await scanner.scanNetworks();

        console.log(`‚úÖ Scan termin√©: ${networks.length} r√©seaux d√©tect√©s\n`);

        if (networks.length > 0) {
            console.log('üìã R√©seaux d√©tect√©s:');
            networks.forEach((network, index) => {
                console.log(`${index + 1}. ${network.ssid}`);
                console.log(`   - BSSID: ${network.bssid || 'N/A'}`);
                console.log(`   - Canal: ${network.channel}`);
                console.log(`   - S√©curit√©: ${network.security}`);
                console.log(`   - Qualit√©: ${network.quality || network.signalStrength || 'N/A'}`);
                console.log('');
            });
        } else {
            console.log('‚ùå Aucun r√©seau d√©tect√©');
        }

    } catch (error) {
        console.error('‚ùå Erreur lors du test:', error.message);
        console.error(error.stack);
    }
}

// Ex√©cuter le test
testWifiScan(); 